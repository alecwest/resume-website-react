/* tslint:disable */
/* eslint-disable */
/**
 * resume-data
 * API for managing my resume data
 *
 * The version of the OpenAPI document: 2023-01-16T13:44:13Z
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ConsumedCapacity } from './ConsumedCapacity';
import {
    ConsumedCapacityFromJSON,
    ConsumedCapacityFromJSONTyped,
    ConsumedCapacityToJSON,
} from './ConsumedCapacity';
import type { ResumeEntry } from './ResumeEntry';
import {
    ResumeEntryFromJSON,
    ResumeEntryFromJSONTyped,
    ResumeEntryToJSON,
} from './ResumeEntry';

/**
 * 
 * @export
 * @interface UserData
 */
export interface UserData {
    /**
     * 
     * @type {Array<ResumeEntry>}
     * @memberof UserData
     */
    items: Array<ResumeEntry>;
    /**
     * 
     * @type {number}
     * @memberof UserData
     */
    count: number;
    /**
     * 
     * @type {number}
     * @memberof UserData
     */
    scannedCount: number;
    /**
     * 
     * @type {ConsumedCapacity}
     * @memberof UserData
     */
    consumedCapacity: ConsumedCapacity;
}

/**
 * Check if a given object implements the UserData interface.
 */
export function instanceOfUserData(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "items" in value;
    isInstance = isInstance && "count" in value;
    isInstance = isInstance && "scannedCount" in value;
    isInstance = isInstance && "consumedCapacity" in value;

    return isInstance;
}

export function UserDataFromJSON(json: any): UserData {
    return UserDataFromJSONTyped(json, false);
}

export function UserDataFromJSONTyped(json: any, ignoreDiscriminator: boolean): UserData {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'items': ((json['Items'] as Array<any>).map(ResumeEntryFromJSON)),
        'count': json['Count'],
        'scannedCount': json['ScannedCount'],
        'consumedCapacity': ConsumedCapacityFromJSON(json['ConsumedCapacity']),
    };
}

export function UserDataToJSON(value?: UserData | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'Items': ((value.items as Array<any>).map(ResumeEntryToJSON)),
        'Count': value.count,
        'ScannedCount': value.scannedCount,
        'ConsumedCapacity': ConsumedCapacityToJSON(value.consumedCapacity),
    };
}

